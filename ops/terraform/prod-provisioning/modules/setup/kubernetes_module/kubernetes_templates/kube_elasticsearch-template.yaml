#This is the Service that connects Elasticsearch pods to the rest of the cluster and the outside.
#This effectively acts as a reverse proxy.
apiVersion: v1
kind: Service
metadata:
  name: sitesearch-elasticsearch
  labels:
    app: sitesearch-elasticsearch
spec:
  #Give this a static IP
  clusterIP: 10.105.217.75
  #This specifies to where the requsts get forwarded (to the app called elasticsearch)
  selector:
    app: sitesearch-elasticsearch
  ports:
  - name: elastic-json
    port: 9300
    targetPort: 9300
  - name: elastic-hr
    port: 9200
  clusterIP: None
---
#Elasticsearch as a Statefulset:
#Statefulset because then the name does not change and we can always access the data through the same path
#Drawback is the slow shutdown time, since there are rolling updates, this does not effect restart time
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  labels:
    app: sitesearch-elasticsearch
spec:
  serviceName: sitesearch-elasticsearch
  replicas: 2 #${count - 1}
  #Describes the grouping of the pods -> which pods should be included in the StatefulSet
  selector:
    matchLabels:
      app: sitesearch-elasticsearch
  #template describes what the pods of a StatefulSet should look like
  template:
    metadata:
      #Adding it to the app called searchservice
      labels:
        app: sitesearch-elasticsearch
    spec:
      #Describing containers in the pods. In our case we only have 1 container per pod.
      containers:
        - name: sitesearch-elasticsearch
          image: docker-registry.sitesearch.cloud/intrafind/if-elasticsearch:2.4.6.7
          env:
            #The unicast_hosts environment variable points to the service (the reverse proxy)
            - name: minimum_master_nodes
              value: "1"
            #This address suffix is kubernetes standard, the port is elasticsearch specific
            - name: DNS_SUFFIX
              value: "sitesearch-elasticsearch.default.svc.cluster.local:9300"
            - name: Replace_Trigger
              value: "REPLACE_TRIGGER_VALUEtrue"
          #for loop in order to have a flexible amount of elasticsearch nodes
          #for breakdown:
          #   for i in range (0..Amount of elasticsearch data nodes)
          #     echo address of elasticsearch data node with index i
          #   Done
          #   append elasticsearch-quorum node address
          command: ["/bin/sh"]
          args: ["-c","export unicast_hosts=\$(echo -n \$(for X in \$(seq 0 ${count - 2}); do echo -n elasticsearch-\$X.\$DNS_SUFFIX,;done)elasticsearch-quorum-0.\$DNS_SUFFIX);
          /home/app_user/sitesearch-elasticsearch/bin/runConsole.sh"]
          volumeMounts:
          - name: google-persistent-disk
            mountPath: /home/app_user/data
          livenessProbe:
            httpGet:
              port: 9200
            initialDelaySeconds: 180
            periodSeconds: 300
            failureThreshold: 2
      #This functions like docker login, to pull the image from the correct registry.
      #The following command is needed for this to work:
      #kubectl create secret docker-registry {docker_registry_secret_name} --docker-server={docker_registry_address}
      #--docker-username={docker_registry_username} --docker-password={docker_registry_password} --docker-email=this.field.is@deprecated.com
      imagePullSecrets:
      - name: sitesearch-secret
  volumeClaimTemplates:
    - metadata:
        name: google-persistent-disk
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: gce-elasticsearch-data-node
        resources:
          requests:
            storage: 10Gi
---
#Since we always want a non data node, here we declare it seperately
#We use a StatefulSet, so that we can update the container easier
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-quorum
  labels:
    app: sitesearch-elasticsearch
spec:
  serviceName: sitesearch-elasticsearch
  replicas: 1
  #Describes the grouping of the pods -> which pods should be included in the StatefulSet
  selector:
    matchLabels:
      app: sitesearch-elasticsearch
  #template describes what the pods of a StatefulSet should look like
  template:
    metadata:
      #Adding it to the app called searchservice
      labels:
        app: sitesearch-elasticsearch
    spec:
      #Describing containers in the pods. In our case we only have 1 container per pod.
      containers:
        - name: sitesearch-elasticsearch-quorum
          image: docker-registry.sitesearch.cloud/intrafind/if-elasticsearch:2.4.6.7
          env:
            #The unicast_hosts environment variable points to the service (the reverse proxy)
            - name: minimum_master_nodes
              value: "1"
            - name: ELASTICSEARCH_NODE_DATA
              value: "false"
            #This address suffix is kubernetes standard, the port is elasticsearch specific
            - name: DNS_SUFFIX
              value: "sitesearch-elasticsearch.default.svc.cluster.local:9300"
            - name: Replace_Trigger
              value: "REPLACE_TRIGGER_VALUEtrue"
          #for loop in order to have a flexible amount of elasticsearch nodes
          #for breakdown:
          #   for i in range (0..Amount of elasticsearch data nodes)
          #     echo address of elasticsearch data node with index i
          #   Done
          #   append elasticsearch-quorum node address
          command: ["/bin/sh"]
          args: ["-c","export unicast_hosts=\$(echo -n \$(for X in \$(seq 0 ${count - 2}); do echo -n elasticsearch-\$X.\$DNS_SUFFIX,;done)elasticsearch-quorum-0.\$DNS_SUFFIX);
          /home/app_user/sitesearch-elasticsearch/bin/runConsole.sh"]
          volumeMounts:
          - name: google-persistent-disk
            mountPath: /home/app_user/data
          livenessProbe:
            httpGet:
              port: 9200
            initialDelaySeconds: 180
            periodSeconds: 300
            failureThreshold: 2
      #This functions like docker login, to pull the image from the correct registry.
      #The following command is needed for this to work:
      #kubectl create secret docker-registry {docker_registry_secret_name} --docker-server={docker_registry_address}
      #--docker-username={docker_registry_username} --docker-password={docker_registry_password} --docker-email=this.field.is@deprecated.com
      imagePullSecrets:
      - name: sitesearch-secret
  volumeClaimTemplates:
    - metadata:
        name: google-persistent-disk
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: gce-elasticsearch-quorum-node
        resources:
          requests:
            storage: 10Gi

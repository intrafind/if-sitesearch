---
apiVersion: v1
data:
    .dockerconfigjson: {{ .Values.app.dockerRegistrySecret }}
kind: Secret
metadata:
    name: docker-registry-credentials-intrafind-net
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
kind: ConfigMap
metadata:
    name: sis-config
data:
    tlsCrt: {{ .Values.app.none | quote }}
    tlsKey: {{ .Values.app.none }}
---
        {{/*    kubectl create secret tls test-tls --key="tls.key" --cert="tls.crt"*/}}
apiVersion: v1
kind: Secret
metadata:
    name: tls-certificate
type: kubernetes.io/tls
data:
    tls.crt: {{ .Files.Get "cert.pem" | b64enc }}
    tls.key: {{ .Files.Get "privkey.pem" | b64enc }}
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
    name: ingress
    annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
spec:
    tls:
        - secretName: tls-certificate
          hosts:
              - delete-this.intrafind.net
    rules:
        - host: delete-this.intrafind.net
          http:
              paths:
                  - backend:
                        serviceName: if-sitesearch
                        servicePort: 8001
                    path: /
                  - backend:
                        serviceName: if-sitesearch
                        servicePort: 8001
                    path: /prefix
---
apiVersion: v1
kind: Service
metadata:
    name: if-sitesearch
spec:
    selector:
        app: if-sitesearch
    ports:
        - name: web
          port: 8001
    type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: if-sitesearch
    labels:
        app: if-sitesearch
spec:
    selector:
        matchLabels:
            app: if-sitesearch
    template:
        metadata:
            name: if-sitesearch
            labels:
                app: if-sitesearch
        spec:
            imagePullSecrets:
                - name: docker-registry-credentials-intrafind-net
            containers:
                - name: if-sitesearch
                  image: docker-registry.intrafind.net/intrafind/sis-sitesearch:latest
                  env:
                      - name: SIS_API_SERVICE_URL
                        value: {{ .Values.app.serviceUrl }}
                      - name: SIS_SERVICE_HOST
                        value: {{ .Values.app.serviceHost }}
                      - name: SERVICE_SECRET
                        value: {{ .Values.app.sis.serviceSecret }}
                      - name: WOO_COMMERCE_CONSUMER_KEY
                        value: {{ .Values.app.sis.wooCommerceConsumerKey }}
                      - name: WOO_COMMERCE_CONSUMER_SECRET
                        value: {{ .Values.app.sis.wooCommerceConsumerSecret }}
                      - name: INVISIBLE_RECAPTCHA_SITE_SECRET
                        value: {{ .Values.app.recaptchaSecret }}
                      - name: ADMIN_SITE_SECRET
                        value: {{ .Values.app.adminSecret }}
                      - name: DEV_SKIP_FLAG
                        value: "{{ .Values.app.devSkip }}"
                      - name: BUILD_NUMBER
                        value: "{{ .Values.meta.buildNumber }}"
                      - name: SCM_HASH
                        value: {{ .Values.meta.scmHash }}
                  volumeMounts:
                      - mountPath: "/mnt/persistence"
                        name: storage-volume
            volumes:
                - name: storage-volume
                  persistentVolumeClaim:
                      claimName: csi-pvc-storage
---
apiVersion: v1
kind: Secret
metadata:
    name: hcloud-csi
    namespace: kube-system
stringData:
    token: {{ .Values.app.HETZNER_API_TOKEN }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: csi-pvc-storage
    namespace: {{ .Values.app.tenant }}
spec:
    accessModes:
        - ReadWriteOnce
    resources:
        requests:
            storage: 10Gi
    storageClassName: hcloud-volumes
    volumeName: pvc-{{ .Values.app.tenant }}
---
apiVersion: v1
kind: PersistentVolume
metadata:
    name: pvc-{{ .Values.app.tenant }}
spec:
    accessModes:
        - ReadWriteOnce
    capacity:
        storage: 10Gi
    claimRef:
        apiVersion: v1
        kind: PersistentVolumeClaim
        name: csi-pvc-storage
        namespace: {{ .Values.app.tenant }}
    csi:
        driver: csi.hetzner.cloud
        fsType: ext4
        volumeHandle: "{{ .Values.app.volumeHandle }}"
    persistentVolumeReclaimPolicy: Delete
    storageClassName: hcloud-volumes
---